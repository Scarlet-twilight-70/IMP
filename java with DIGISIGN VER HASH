package com.sbi.tcs;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Properties;
import java.security.cert.CertificateException;
import com.ibm.misc.BASE64Decoder;
import com.ibm.misc.BASE64Encoder;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class RSAES {

	static String jkspwd = "password";
	static String base64PrivateKey, base64publickey, base64sourcepublickey = null;
	static String sourcepublicpath = "";
	static HashMap<String, String> hashmap_public = new HashMap<>();

//	   /////////////PROD
//	static String jkspath = "C:\\Users\\v1009884\\Desktop\\CERTIFICATE\\EIS_ENC_23122024.jks";
// 	   static String certPath="C:\\Users\\v1009884\\Desktop\\CERTIFICATE\\SMS_PROD_API.cer";
//	static String certPath = "C:\\Users\\v1009884\\Desktop\\CERTIFICATE\\EIS_ENC_Public_2024.cer";

	///////////// UAT
	static String jkspath = "C:\\Users\\v1009884\\Desktop\\CERTIFICATE\\ibmdevportal_N.jks";
	static String certPath = "C:\\Users\\v1009884\\Desktop\\CERTIFICATE\\inbintranet.onlinesbi.com.cer";
	static String propertiesPath = "C:\\Users\\v1009884\\Desktop\\CERTIFICATE\\KeyMapper.properties";
	/////////////////////////////////////////
//	static String jkspath = "/opt/IBM/RSAKeystore/ibmdevportal.jks";
//	static String certPath = "/opt/IBM/RSAKeystore/EIS_ENC_UAT_PUB.cer";
//	static String propertiesPath = "/opt/IBM/PropertyFile/KeyMapper.properties";
	static String dsjkspath = jkspath;
	static String TSjkspath = jkspath;

	static {
		Security.addProvider(new BouncyCastleProvider());
	}

	public static String SHA512Hash(String encdata, String accessToken) {
		try {
			System.out.println(encdata + "~" + accessToken);
			String toHashString = encdata + "~" + accessToken;
			// get instance of sha 512 algorithm
			MessageDigest md = MessageDigest.getInstance("SHA-512");
			// calculate digest of toHashString
			byte[] messageDigest = md.digest(toHashString.getBytes());
			BigInteger no = new BigInteger(1, messageDigest);
			// convert to HEX
			String hashtext = no.toString(16);
			while (hashtext.length() < 32) {
				hashtext = "0" + hashtext;
			}
			return hashtext;
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException(e);
		}
	}

	public static String RSADecrypt(String encdata, String Padding) {
		String data = "";
		try {
			if ((base64PrivateKey == null) || (base64PrivateKey.contains("X-JavaError"))) {
				base64PrivateKey = getPrivateKey(jkspath);
			}
			byte[] privebase64decKey = new BASE64Decoder().decodeBuffer(base64PrivateKey);
			PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privebase64decKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PrivateKey privaKey = keyFactory.generatePrivate(keySpec);

			// Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
			Cipher cipher = Cipher.getInstance("RSA/ECB/" + Padding + "Padding");
			cipher.init(Cipher.DECRYPT_MODE, privaKey);
			byte[] dataByte = new BASE64Decoder().decodeBuffer(encdata);
			data = new String(cipher.doFinal(dataByte));
		}

		catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return data;
	}

	public static String RSAEncrypt(String data, String Padding) {
		String encData = "";
		try {
			if ((base64publickey == null) || (base64publickey.contains("X-JavaError"))) {
				base64publickey = getPublicKey();
			}
			byte[] base64decpublivKey = new BASE64Decoder().decodeBuffer(base64publickey);
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(base64decpublivKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PublicKey pubKey = keyFactory.generatePublic(keySpec);

			// Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
			Cipher cipher = Cipher.getInstance("RSA/ECB/" + Padding + "Padding");
			cipher.init(Cipher.ENCRYPT_MODE, pubKey);
			byte[] encdatabyte = cipher.doFinal(data.getBytes("UTF-8"));
			encData = new BASE64Encoder().encode(encdatabyte).replaceAll("\r\n", "");

			// fin.close();
		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return encData;
	}

	public static String AESEncrypt(String message, String key) {

		try {
			byte[] keybyte = key.getBytes("UTF-8");
			byte[] ivkey = Arrays.copyOf(keybyte, 16);

			IvParameterSpec iv = new IvParameterSpec(ivkey);
			SecretKeySpec seckey = new SecretKeySpec(keybyte, "AES");
			Cipher c = Cipher.getInstance("AES/CBC/PKCS5PADDING");
			c.init(Cipher.ENCRYPT_MODE, seckey, iv);
			byte[] encvalue = c.doFinal(message.getBytes("UTF-8"));
			String encryptedvalue = new BASE64Encoder().encode(encvalue).replaceAll("\r\n", "");
			return encryptedvalue;

		} catch (Exception e) {

			return "X-JavaError" + " " + e.toString();
		}

	}

	public static String AESEncrypt_GCM(String message, String key) {

		try {

			byte[] keybyte = key.getBytes("UTF-8");
			byte[] ivkey = Arrays.copyOf(keybyte, 12);
			SecretKeySpec seckey = new SecretKeySpec(keybyte, "AES");
			Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
			GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(128, ivkey);
			c.init(Cipher.ENCRYPT_MODE, seckey, gcmParameterSpec);
			byte[] encvalue = c.doFinal(message.getBytes("UTF-8"));
			String encryptedvalue = new BASE64Encoder().encode(encvalue).replaceAll("\r\n", "");
			return encryptedvalue;

		} catch (Exception e) {

			return "X-JavaError" + " " + e.toString();
		}

	}

	public static String AESDecrypt_GCM(String message, String key) {
		if (message.trim().length() == 0) {
			return "X-JavaError" + " " + "request body is empty";
		}
		try {
			byte[] keybyte = key.getBytes("UTF-8");
			byte[] ivkey = Arrays.copyOf(keybyte, 12);
			byte[] encvalue = new BASE64Decoder().decodeBuffer(message);
			SecretKeySpec seckey = new SecretKeySpec(keybyte, "AES");
			Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
			GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(128, ivkey);
			c.init(Cipher.DECRYPT_MODE, seckey, gcmParameterSpec);
			byte[] decvalue = c.doFinal(encvalue);
			String decryptedvalue = new String(decvalue);
			return decryptedvalue;

		} catch (Exception e) {

			return "X-JavaError" + " " + e.toString();
		}

	}

	public static String AESDecrypt(String message, String key) {

		try {
			byte[] keybyte = key.getBytes("UTF-8");
			byte[] ivkey = Arrays.copyOf(keybyte, 16);

			IvParameterSpec iv = new IvParameterSpec(ivkey);
			byte[] encvalue = new BASE64Decoder().decodeBuffer(message);
			SecretKeySpec seckey = new SecretKeySpec(keybyte, "AES");
			Cipher c = Cipher.getInstance("AES/CBC/PKCS5PADDING");
			c.init(2, seckey, iv);
			byte[] decvalue = c.doFinal(encvalue);
			String decryptedvalue = new String(decvalue);
			return decryptedvalue;

		} catch (Exception e) {

			return "X-JavaError" + " " + e.toString();
		}

	}

	public static String AESDecrypt_1(String message, String key) {

		try {
			byte[] keybyte = key.getBytes("UTF-8");
			byte[] ivkey = "0000000000000000".getBytes();
			IvParameterSpec iv = new IvParameterSpec(ivkey);
			byte[] encvalue = new BASE64Decoder().decodeBuffer(message);
//			MessageDigest sha = MessageDigest.getInstance("SHA-256");
//			byte[] shakey = sha.digest(keybyte);
			SecretKeySpec seckey = new SecretKeySpec(keybyte, "AES");
			Cipher c = Cipher.getInstance("AES/CBC/PKCS5PADDING");
			c.init(2, seckey, iv);
			byte[] decvalue = c.doFinal(encvalue);
			String decryptedvalue = new String(decvalue);
			return decryptedvalue;

		} catch (Exception e) {

			return "X-JavaError" + " " + e.toString();
		}

	}

	public static String getPrivateKey(String kspath) {
		try {

			boolean isAliasWithPrivateKey = false;
			KeyStore keyStore = KeyStore.getInstance("JKS");
			keyStore.load(new FileInputStream(kspath), jkspwd.toCharArray());

			// iterate over all aliases
			Enumeration<String> es = keyStore.aliases();
			String alias = "";
			while (es.hasMoreElements()) {
				alias = (String) es.nextElement();
				// if alias refers to a private key break at that point
				// as we want to use that certificate
				if (isAliasWithPrivateKey = keyStore.isKeyEntry(alias)) {
					break;
				}
			}

			if (isAliasWithPrivateKey) {

				KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(alias,
						new KeyStore.PasswordProtection(jkspwd.toCharArray()));

				PrivateKey myPrivateKey = pkEntry.getPrivateKey();
				byte[] privateKey = (myPrivateKey.getEncoded());
				base64PrivateKey = DatatypeConverter.printBase64Binary(privateKey);
			}

		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return base64PrivateKey;
	}

	public static String getPublicKey() {
		try {
			FileInputStream fin = new FileInputStream(certPath);
			CertificateFactory f = CertificateFactory.getInstance("X.509");
			X509Certificate certificate = (X509Certificate) f.generateCertificate(fin);
			PublicKey publicKey = certificate.getPublicKey();
			byte[] pk = publicKey.getEncoded();
			base64publickey = DatatypeConverter.printBase64Binary(pk);
			fin.close();
		}

		catch (CertificateException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (IOException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return base64publickey;
	}

	public static String RSADecrypt_OAEP(String encdata) {
		String data = "";
		try {
			if ((base64PrivateKey == null) || (base64PrivateKey.contains("X-JavaError"))) {
				base64PrivateKey = getPrivateKey(jkspath);

				byte[] privebase64decKey = new BASE64Decoder().decodeBuffer(base64PrivateKey);
				PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privebase64decKey);
				KeyFactory keyFactory = KeyFactory.getInstance("RSA");
				PrivateKey privaKey = keyFactory.generatePrivate(keySpec);

				Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPPadding");
				cipher.init(Cipher.DECRYPT_MODE, privaKey);
				byte[] dataByte = new BASE64Decoder().decodeBuffer(encdata);
				data = new String(cipher.doFinal(dataByte));
			}
		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return data;
	}

	public static String RSAEncrypt_OAEP(String data) {
		String encData = "";
		try {
			if ((base64publickey == null) || (base64publickey.contains("X-JavaError"))) {
				base64publickey = getPublicKey();
			}
			byte[] base64decpublivKey = new BASE64Decoder().decodeBuffer(base64publickey);
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(base64decpublivKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PublicKey pubKey = keyFactory.generatePublic(keySpec);

			Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPPadding");
			cipher.init(Cipher.ENCRYPT_MODE, pubKey);
			byte[] encdatabyte = cipher.doFinal(data.getBytes());
			encData = new BASE64Encoder().encode(encdatabyte).replaceAll("\r\n", "");

		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return encData;
	}

	public static void getSourcePublicKey() {
		try {

			KeyStore keyStore = KeyStore.getInstance("JKS");
			keyStore.load(new FileInputStream(TSjkspath), jkspwd.toCharArray());

			Enumeration<String> es = keyStore.aliases();
			String alias = "";
			while (es.hasMoreElements()) {
				alias = (String) es.nextElement();
				Certificate certificate = keyStore.getCertificate(alias);

				PublicKey publicKey = certificate.getPublicKey();
				byte[] pk = publicKey.getEncoded();
				// if (jkspwd.contains("X-JavaError") = false )
				base64sourcepublickey = DatatypeConverter.printBase64Binary(pk);
				hashmap_public.put(alias, base64sourcepublickey);

			}
		}

		catch (Exception e) {
			System.out.println("Error in getting Source Public Keys " + e.toString());

		}

	}

	public static String getSourcePublicKey(String source) {
		try {

			// jkspwd = getProperty("aesk", propertiesPath);
			// enpass = getProperty("enpass", propertiesPath);

			KeyStore keyStore = KeyStore.getInstance("JKS");
			// jkspwd = AESDecrypt(enpass, jkspwd);

			keyStore.load(new FileInputStream(TSjkspath), jkspwd.toCharArray());

			Certificate certificate = keyStore.getCertificate(source);

			PublicKey publicKey = certificate.getPublicKey();
			byte[] pk = publicKey.getEncoded();
			base64sourcepublickey = DatatypeConverter.printBase64Binary(pk);
			System.out.println("Size of Hashmap before " + hashmap_public.size());
			hashmap_public.put(source, base64sourcepublickey);
			System.out.println("Size of Hashmap after " + hashmap_public.size());

		}

		catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return base64sourcepublickey;
	}

	public static String VDigiSignVerify(String data, String signature) {
		String SigVerify = "";
		try {

			if (base64publickey == null) {
				base64publickey = getPublicKey();
			}
			byte[] base64decpublivKey = new BASE64Decoder().decodeBuffer(base64publickey);
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(base64decpublivKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PublicKey pubKey = keyFactory.generatePublic(keySpec);

			Signature privateSignature = Signature.getInstance("SHA256withRSA");
			privateSignature.initVerify(pubKey);
			privateSignature.update(data.getBytes("UTF-8"));
			byte[] y = new BASE64Decoder().decodeBuffer(signature);

			boolean bool = privateSignature.verify(y);

			if (bool) {
				SigVerify = "Signature Verified";
				// System.out.println("Signature verified");
			} else {
				SigVerify = "Signature failed";
				// System.out.println("Signature failed");
			}
			return SigVerify;
		} catch (IOException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (NoSuchAlgorithmException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (InvalidKeyException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
	}
	
	public static String VDigiSignVerify(String data, String signature,String CER) {
		String SigVerify = "";
		try {

//			FileInputStream fin = new FileInputStream(certPath);
			byte[] cerData = Base64.getDecoder().decode(CER);
			CertificateFactory f = CertificateFactory.getInstance("X.509");
			X509Certificate certificate = (X509Certificate) f.generateCertificate(new java.io.ByteArrayInputStream(cerData));
			PublicKey publicKey = certificate.getPublicKey();
			byte[] pk = publicKey.getEncoded();
			base64publickey = DatatypeConverter.printBase64Binary(pk);
			System.out.println(base64publickey);
			byte[] base64decpublivKey = new BASE64Decoder().decodeBuffer(base64publickey);
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(base64decpublivKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PublicKey pubKey = keyFactory.generatePublic(keySpec);

			Signature privateSignature = Signature.getInstance("SHA256withRSA");
			privateSignature.initVerify(pubKey);
			privateSignature.update(data.getBytes("UTF-8"));
			byte[] y = new BASE64Decoder().decodeBuffer(signature);

			boolean bool = privateSignature.verify(y);

			if (bool) {
				SigVerify = "Signature Verified";
				// System.out.println("Signature verified");
			} else {
				SigVerify = "Signature failed";
				// System.out.println("Signature failed");
			}
			return SigVerify;
		} catch (IOException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (NoSuchAlgorithmException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (InvalidKeyException e) {
			return "X-JavaError" + " " + e.toString();
		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
	}

	public static String eisDigiSignVerify(String data, String signature, String source) {
		String SigVerify = "";
		try {
			System.out.println("Hashmap contains " + hashmap_public.size());
			// if ((hashmap_public.isEmpty()) || !jkspwd.contains("X-JavaError")){
			if (hashmap_public.isEmpty()) {
				getSourcePublicKey();
				System.out.println("Hashmap contains afteralias " + hashmap_public.size());
			}
			if (hashmap_public.containsKey(source)) {
				base64sourcepublickey = hashmap_public.get(source);
			} else {
				base64sourcepublickey = getSourcePublicKey(source);
			}

			byte[] base64decpublivKey = new BASE64Decoder().decodeBuffer(base64sourcepublickey);
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(base64decpublivKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PublicKey pubKey = keyFactory.generatePublic(keySpec);

			Signature privateSignature = Signature.getInstance("SHA256withRSA");
			privateSignature.initVerify(pubKey);
			privateSignature.update(data.getBytes());
			byte[] y = new BASE64Decoder().decodeBuffer(signature);

			boolean bool = privateSignature.verify(y);

			if (bool) {
				SigVerify = "Signature Verified";
				// System.out.println("Signature verified");
			} else {
				SigVerify = "Signature failed";
				// System.out.println("Signature failed");
			}
			return SigVerify;
		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
	}

	public static String eisDigitalSignature(String data) {
		String encData = "";
		try {
			if ((base64PrivateKey == null) || (base64PrivateKey.contains("X-JavaError"))) {
				base64PrivateKey = getPrivateKey(dsjkspath);
			}
			byte[] privebase64decKey = new BASE64Decoder().decodeBuffer(base64PrivateKey);
			PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privebase64decKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			Signature privateSignature = Signature.getInstance("SHA256withRSA");
			PrivateKey privaKey = keyFactory.generatePrivate(keySpec);
			privateSignature.initSign(privaKey);
			privateSignature.update(data.getBytes("UTF-8"));
			byte[] s = privateSignature.sign();

			encData = new BASE64Encoder().encode(s).replaceAll("\r\n", "");

		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}

		return encData;

	}

	public static String getProperty(String key, String propertiesPath) {

		BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader(propertiesPath));
			Properties p = new Properties();
			p.load(reader);
			return p.getProperty(key);
		}

		catch (Exception e) {

			return "X-JavaError" + " " + e.toString();

		}

	}

	public static String RSAHASH_EXT(String data) {
		String encData = "";
		try {
			base64publickey = getPublicKey();
			// System.out.println(base64publickey);
			// base64publickey =
			// "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp5lnbStcPbPQLwcDeA15e3+xszro75Pr3kf0mCMBkaJ5q8TywtwRSgAAYo2uewxRwhpLZP6DUc9jGHTV2coztlaM03f9dRtXxe7V4smi+5TiK/soaJJkwRArkGKicdGzzjYW0vhQFpcEeba6OittXkDkV1q6d3IKmbRganleASxs8BqSzLC265BHKkBDAPjIhOcvRjftK52ScMHM4Sggn+/nxGXBSzNbsdlNVTcKLK+vDxWi7rJczICiKIquyTmIUvCMJ/PuyHSXn0TRc9FVHFCM1dqZrRH8hXHKSuxTIxCL912GMW4AqZ/M+KNXK5ZgREYG9eb5YmEc4ZuD/zzhsQIDAQAB";
			byte[] base64decpublivKey = new BASE64Decoder().decodeBuffer(base64publickey);
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(base64decpublivKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PublicKey pubKey = keyFactory.generatePublic(keySpec);

			Cipher cipher = Cipher.getInstance("RSA/NONE/NoPadding", "BC");
			cipher.init(2, pubKey);
			byte[] dataByte = new BASE64Decoder().decodeBuffer(data);
			byte[] hashdata = cipher.doFinal(dataByte);
			StringBuilder sb = new StringBuilder();
			for (byte b : hashdata) {
				sb.append(String.format("%02X ", b));
			}
			encData = ((sb.toString()).replaceAll("\\s", ""));
		} catch (Exception e) {
			return "X-JavaError" + " " + e.toString();
		}
		return encData;
	}

//---------------------------------------------------------NSE----------------------------------------------
	public static String getSHA(String input, String type) {
		MessageDigest md = null;
		String encData = null;
		try {
			md = MessageDigest.getInstance("SHA-256");
			byte encdatabyte[] = md.digest(input.getBytes());
			if (type.equalsIgnoreCase("BASE64")) {
				encData = new BASE64Encoder().encode(encdatabyte).replaceAll("\r\n", "");
			} else {
				StringBuilder sb = new StringBuilder();
				for (byte b : encdatabyte) {
					sb.append(String.format("%02X ", b));
				}
				encData = (sb.toString()).replaceAll("\\s", "");
			}
			;
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			encData = e.toString();
		}
		return encData;
	}

	public static String dataFromFile(String path) {
		String Data = "";
		try (BufferedReader br = new BufferedReader(new FileReader(path))) {
			StringBuilder sb = new StringBuilder(9000000);
			String line = br.readLine();
//			sb.append(line);
			while (line != null) {
				sb.append(line);
//				sb.append(System.lineSeparator());
				line = br.readLine();
			}
			Data = sb.toString();
//			Data.replace(System.getProperty("line.separator"), "");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			Data = e.toString();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			Data = e.toString();
		}
//		System.out.println(Data);
		return Data;
	}

	public static String RSADecrypt_test(String encdata) {
		String data = "";

		try {
			String base64publickey = "";
			base64publickey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp5lnbStcPbPQLwcDeA15e3+xszro75Pr3kf0mCMBkaJ5q8TywtwRSgAAYo2uewxRwhpLZP6DUc9jGHTV2coztlaM03f9dRtXxe7V4smi+5TiK/soaJJkwRArkGKicdGzzjYW0vhQFpcEeba6OittXkDkV1q6d3IKmbRganleASxs8BqSzLC265BHKkBDAPjIhOcvRjftK52ScMHM4Sggn+/nxGXBSzNbsdlNVTcKLK+vDxWi7rJczICiKIquyTmIUvCMJ/PuyHSXn0TRc9FVHFCM1dqZrRH8hXHKSuxTIxCL912GMW4AqZ/M+KNXK5ZgREYG9eb5YmEc4ZuD/zzhsQIDAQAB";

			// byte[] secretKeyBytes = data.getBytes();

			// byte[] base64decpublivKey = (new
			// BASE64Decoder()).decodeBuffer(base64publickey);
			byte[] base64decpublivKey = Base64.getDecoder().decode(base64publickey);
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(base64decpublivKey);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PublicKey pubKey = keyFactory.generatePublic(keySpec);
			Cipher cipher = Cipher.getInstance("RSA/NONE/OAEPWithSHA1AndMGF1Padding", "BC");
			cipher.init(2, pubKey);
			// byte[] encdatabyte = cipher.doFinal(secretKeyBytes);
			byte[] dataByte = new BASE64Decoder().decodeBuffer(encdata);
			data = new String(cipher.doFinal(dataByte));
			return data;
		} catch (Exception var8) {
			return "X-JavaError " + var8.toString();
		}
	}

	public static void main(String[] args) throws IOException {
		RSAES rsaaes = new RSAES();
//		String PLAIN_DATA = dataFromFile("plainData.txt");
//		System.out.println("PLAIN_DATA: "+PLAIN_DATA);
//		String AT = "IEjlXB/gmCcqATjbmgF8uq1aY8PNfDB8Ae0fu5hlQvExKlJeTKcmrxQe9uKCLiBbwi/OpSsr4podAfY33kKV00pu971br89Ftv8PQ9PZ0QR+FOsLaCW0W+jBL4txqBHvOEb6Xxi9P4iTitU82LHLZY4Q85nDGWuoJkTGMqW/Od80w5w+2A1zw4zI0cRnNZZxPCOqcPRwXl3zjw7CBiznbgNioUmFkznLKhTAvxO0qHr2Q4sTxO8GuMeDr+3uDZjN6tfyswjOEjTadTEblvQe7fixzzzTgbdpI8QDfJ+Did2FpjQuT+HRKfxiihInzlejqGFHM4UX5StlMo8/VkhKvA==";
//      	String Data = "FsYOvbMBvnwnGyjpQry61h/JwsdF0eqgaKFkQfh5k0l5Tan2BeYJ6KVAZPetdrGfmkrk2hkKT5wmnhynhTsAD1eVvHxluDMPllFKGwEvEexGnJ07w1nZKe0qqtTvX7BybsbL+07JdR3U9sIb8qPAnpq34C+tpYtHBZ65dgOCYdoQzvXFY6sfq3XY/igNzhIxMcnvyk2j+B6DsHXj43IrUjjZ4vLbyLY/L+PAfwGANGHJPSSBKUNNfNreGCDlYTkdGm5AXgr4WQmhVnV/GViB9OEyjFwbCMNEWuVQQQmlVhpOnsC55UroWU6gU6PkAY2pM3tkAakZ+muT4FE7dgpLfROk/7KBw07WIVERKKi2DrzDTaZp/kSa5cufV7azbD3cE5sf+IseCHtwwwfG5pmY0Uvigy4gGorBnLAT+msQEGMmw77I4KiMfd2iKcYGm9GUBlXJbBumHgXPDZjQWx0JNeYdBQsS";
//      	String DG = "X4GgLYfVgyXQHPz5gxWzIsnX4QcpjWtqMSFaIgnP6tJ/1NL5A+mbA5PGd5HwVu9RzwJp9Zc0cwYsntyWYo/wgnZi/k8/wLnke0IkRoKT/gWcuDr9/blAy6KHmQCmyFQJnKm/JfkRvC44+FC2cUrodRUYt7wdfVdU071ksQgKi/wX7+64aj3fAjjhG7RV5YHlrutrw60yKTDFAYCeAHqc/3exlu4OVobAaB5V16oLU+V9CIR2Qak8kz1/mDHwvzM62wDUwxq0btWxpkMJSnA2eggu1FB9Rabxlkp3Jt1sfZ9GyFIy5F+il6mgZADQIb3K0MbDRXV5VC8ndzfi1f4ZvQ==";
//		String key = "00070525130515000721202559636600";//RSADecrypt_OAEP(AT);
//		String PL_DATA = AESDecrypt_GCM(Data, key);
//		System.out.println("PD: "+PL_DATA);
//		String CER = "MIIFmTCCBIGgAwIBAgITGgAQyUIzz6iIY1+eWQAAABDJQjANBgkqhkiG9w0BAQsFADBAMRMwEQYKCZImiZPyLGQBGRYDU0JJMRIwEAYKCZImiZPyLGQBGRYCQUQxFTATBgNVBAMTDFNCSS1QUk9ELVJDQTAeFw0yMzExMDQxNDI0MjJaFw0yNTExMDMxNDI0MjJaMGYxCzAJBgNVBAYTAklOMRQwEgYDVQQIEwtNYWhhcmFzaHRyYTEPMA0GA1UEBxMGTXVtYmFpMQwwCgYDVQQKEwNTQkkxDDAKBgNVBAsTA0VJUzEUMBIGA1UEAwwLRU5DX0VJU19VQVQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDdkkvd/PDvCheiFiU66V5gHoGDZY/ilXqdnwmm/ER8B6OJofI5ZaXeZy7g2lGpda79KNLik31Y3SeYpPMc2JQ6qQdwNDNa8HcLSUrPu9guXOJzBu1+xRPNmB4eVvbI67iwNtglxrpICjIHLF2c5bLI5Q2zd06RgI2AY6xVmLM3kvhKJJdSL7lbunxWvrr5GnjQErH7U0kU/TuDswkJo1Uqlg7+R/wOAamSB8WrAtAI+a1b6hDOUriGUIAN9UGPquYswt5/a//rp+GCdp3H7zg9Lv9oJ8elqtqpS4S5WDcVcKfWgW8K+R4iczUGnkGp5vjvgdwGqqGbNVr+Bp8iBPr1AgMBAAGjggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwHQYDVR0OBBYEFIgHGLf4jUSLVn2yTXmyOLDcNTLdMB8GA1UdIwQYMBaAFDeaIHQwXiT9H+W/rv8A9GsVdZ+wMIHLBgNVHR8EgcMwgcAwgb2ggbqggbeGgbRsZGFwOi8vL0NOPVNCSS1QUk9ELVJDQSxDTj1TQklST09UQ0FQUk9ELENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPUFELERDPVNCST9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0P2Jhc2U/b2JqZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnQwgbkGCCsGAQUFBwEBBIGsMIGpMIGmBggrBgEFBQcwAoaBmWxkYXA6Ly8vQ049U0JJLVBST0QtUkNBLENOPUFJQSxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPUFELERDPVNCST9jQUNlcnRpZmljYXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlvbkF1dGhvcml0eTA8BgkrBgEEAYI3FQcELzAtBiUrBgEEAYI3FQiGgZxcg8eAW4P1kTeE4IFms+pkaobo0A2Dge0JAgFkAgEVMA0GCSqGSIb3DQEBCwUAA4IBAQBbwhUAEQRVQy8mKVFE3WoohhU2dPQ0w/oHuq762lr2H48Qf1o0BtgX5OI/TikqoopZ3c/G5OBqEa1uTGUV9lCEbd9UxsTCPWueVaxy9H6yXgRIhlxaplz44iRAPmZwnxdWZusmK4FVKtFvO1GPNQ6wnGlvn7u5QVKvoCUwU/1rRuxlOYZpEwHh4ozvCgbl1P6+Wr4Lb0JcszHxSYtJgsZtLjUtyplhQn7389Ili/jZ1kENQCDuqsaDYNlVxyXKPBJXRu11wvu3+Sol9o3FqrWb96LgN7S02ZhwJlNYTU6FhR65L64vgPyHO4UXtivuigHNgG4nvVUNuHJMHYHDZx1j";
//		String DGV= VDigiSignVerify(PL_DATA, DG,CER);
//		System.out.println("dit: "+AESEncrypt("ew0KICAgICJUZXN0IjoiQ2liaWwiDQp9", "8762e28e364a4cdbb8b549e50e85d64f"));
//		System.out.println("dit1: "+AESDecrypt("wQKyGb3U3v0I/0p/t3pRNLD8aJHPVq/YelLAdjXPf/f8MGWdGmtQhLpw68MQvmBZinpNGA==", "8762e28e364a4cdbb8b549e50e85d64f"));
//		////////////-------------------------LARGEPAYLOAD-------------------------////////////////////
////		PrintWriter out1 = new PrintWriter(new FileWriter("outputPlain.txt"));
////		out1.println(AESDecrypt(dataFromFile("ENC_DATA.txt"), key));
////		out1.close();
////		PrintWriter out = new PrintWriter(new FileWriter("C:\\Users\\v1009884\\Desktop\\outputEncrypted.txt"));
////		out.println(AESEncrypt(dataFromFile("C:\\Users\\v1009884\\Desktop\\outputPlain.txt"), key));
////		out.close();
////		DGV = VDigiSignVerify(dataFromFile("outputPlain.txt"), DG);
//		////////////-------------------------LARGEPAYLOAD-------------------------////////////////////
//		
		System.out.println("AT: "+RSADecrypt_OAEP("OdbbipIEXLWjSN9j2yUZanWuYU6g8a1WEC38lfdBTkig4F1iz187o1dOResvsrJoioGqL1Uk76bC6iKqM21nCqi1JW5YEPu+/Po6HYWWl+V0vZNY06L57TpxMq7V6x85ZMh48V1XxWw7I1zqwogcibKVxavm76+preRga5EdDQV8Nx25mlp0ptORdkowBezrBYxxiWa39A50iDiFRigZ7FODtMCavUSwcBSu2Ma5FFxq6K4FEtO5E/wbDZ+hGwyjGfbd7/85CbeS7bfCKQ+p3szIwYsDOt8YkRDLIfxz2KdN0SWCAJ4E+FdcrhILjUJVoTwugSGx6vYjQ3miSDZvnw=="));
//		System.out.println("SIGN: "+DGV);	
//		System.out.println("HASH_FROM_DG: "+RSAHASH_EXT(DG));
//		System.out.println("HASH_FROM_PD: "+getSHA(PL_DATA, "PLAIN"));
		
		System.out.println(getPublicKey());
	}
}
